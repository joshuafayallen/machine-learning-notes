{
  "hash": "5da679bdfe00653f13e7a8371194fc7d",
  "result": {
    "engine": "knitr",
    "markdown": "# Bayesian Statistics \n\nBayesianism has been on the to do list for awhile since well they make the prettiest plots. More importantly we get more coherent measures of uncertainty and are closer to how we actually think of the world. There are lots of broad applications for Bayesianism in the private industry. The betting market for sports and how we think about teams is effectively Bayesian. We incorporate a lot of information about the observable parts of a team like schedule, roster talent, coaching, and guesses about the probablity that the roster will stay healthy. These are all priors we have about things that relate to the success of the team going into the season. As the season progresses and we get data our prior will update. In the case of the Saints this year our prior updated to make them a good team after one game moving our guess about the number of games they would win this year to probably more than their projected win total. With the second win this may have not moved our prior much at all. However, as attrition set in then our prior shifted a little bit back toward the pre-season total so on and so forth.\n\nBayesianism a formalization of this process by encoding our beliefs in probability distributions. Our prior is really just our belief about the distribution and plausible range of values for that variable before ever seeing the data. So if we were to set a prior for a coin we would set the prior as somthing kind of loosy goosy as this \n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprior_heads = rbinom(n = 2, size = 1000, prob = 0.5)\n\nprior_heads[1]/sum(c(prior_heads[1], prior_heads[2]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5014985\n```\n\n\n:::\n:::\n\n\n\n\n\nSo in this case we are just stating that the probability of heads is about 50 percent over a thousand trials assuming a fair coin. However, lets say that we know the coin is biased in a known way that makes it come up heads 61% of the time. We could then set our prior that it willl come up heads as this \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprior_heads_biased = rbinom(n = 2, size = 1000, prob = .61)\n```\n:::\n\n\n\n\n\nThis is not neccessarily all that unique from a standard null hypothesis which we covered in the opening \"chapter\" of this book. It is the combination of the prior and the posterior which makes the Bayesian machine go brrr. \n\nThe posterior can we operationalized along these lines \n\n$$\nPosterior = \\frac{\\text{Probability of Data} \\times Prior}{\\text{Mean probability of Data}}\n$$\n\nWhere we are averaging the probability of the prior. If we derive this out more formally we will see that the posterior is actually proportional to the prodct of the prior and the probability of the data. We can overcome a bad prior given an infinite amount of data, but this process will be inefficient and critically we will never reach infinite data. Priors in Bayesian inference are important computationally as well as substantively. \n\n### What is a prior really? \n\nSetting a prior is one of the hardest things in Bayesian statistics and the subject a large and rich part of the literature. I think one really important thing to adjudicate is what a prior really is. That way we can reinforce the importance of setting a good one, what to check, and how to check it. \n\nAccording to @gelman2013bayesian we can conceptualize the prior distribution along two different lines. There is the *population* interpretation. This is a little frequentisty but is definitely helpful. Lets say that we have some pseudo population of parameters that the candidate parameter $\\beta$ is drawn from. For simplicity sake lets draw $\\beta$ from as standard normal where we overlay the overall distribution \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nsim_data = \\(beta_val = 0, beta_variance = 1, n = 100){\n  \n  sim_dat = tibble(beta_values = rnorm(n, mean = beta_val, sd = beta_variance),\n                   beta_mean = rep(beta_val, length.out = n),\n                   beta_variance = rep(beta_variance, length.out = n))\n\n  return(sim_dat)\n    \n}\n\npop_sims = map(c(5, 10, 15), \\(x) sim_data(beta_val = x)) |>\n    list_rbind() \n\nwide_version = pop_sims |> \n    mutate(id = row_number()) |>\n    pivot_wider(names_from = beta_mean, values_from = beta_values, names_glue = 'mean_{beta_mean}') \n\nplot_dat = wide_version |>\n    mutate(pop_total = pop_sims$beta_values) |>\n    pivot_longer(cols = mean_5:mean_15) |>\n    mutate(nice_labs = as.factor(str_to_title(str_replace(name, '_', \" \"))), \n           nice_labs  = fct_relevel(nice_labs, 'Mean 5', 'Mean 10', 'Mean 15'))\n\n\nggplot(plot_dat) +\ngeom_density(mapping = aes(x = value, y = after_stat(ncount),   fill = nice_labs), \n             stat = \"bin\",  size = 0.5,\n             alpha = 0.7) + \ngeom_density(mapping = aes(x = pop_total, y = after_stat(ncount)), \n                 alpha = 0.9,\n                 color = \"gray30\", size = 0.6, \n             stat = \"bin\",\n             direction = \"mid\") +\n   facet_wrap(vars(nice_labs)) +\n   MetBrewer::scale_fill_met_d(name = 'Lakota') +\n   theme_minimal() +\n   labs(fill = NULL, y = 'Scaled Count') +\n   theme(legend.position = 'none')\n```\n\n::: {.cell-output-display}\n![](Bayesian-Stats_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\nSo in the population interpretation of priors we have kind of weird population by design. Depending on what 'draw' we get our prior could be *N(5,1)* or it could be *N(10,1)* where plausible values center around 5 or 10 with a standard deviation of 1. In this setting we are thinking about given the data what is a reasonable set of values that we would expect to see. In this setting we are kind of explicitly using a bit of frequentist logic to bridge the gap. However, instead of assuming that all values between 5-15 are equally plausible we are expliciltly stating that the mass of the distribution will be around some value and the amount of variation that we will have. This could be useful if we have a huge amount of experiments or results banked and we can imagine our plausible beta values as drawn from some distribution of the experiments.\n\nIn the *state of knowledge* interpretation of priors we are still using our subject matter expertise of the phenomena, but there may not be a good population to ground our priors on. Say we are launching a completly new product or expanding our product into a new market. We may have some idea about what we are likely to see but we don't have the same reference population that we can draw from, but we have at least some idea of what our expectation should be. \n\nAn important thing to note about Bayes Rule is that we can think of Bayes rules along these lines \n\n$$\nPosterior = \\frac{\\overbrace{P(A)}^{\\text{Prior}} \\times \\overbrace{\\text{Probability of Data}}^{Likelihood}}{\\text{Average Probability of Data}}\n$$\n\nWhat this means is that effectively the posterior is a bit of a compromise between our data and our beliefs as the size of the data get bigger our prior will have less of an influence on our posterior distribution, but it will never completely evaporate. \n\n### How to set priors\n\nMost of the time people say just use your substantive knowledge. But that's generally not helpful if you haven't done that in a statistical setting. Lets take it step by step. First we generally outline what we link the distribution of our dependen variable would be. For our outcome variable we may think that its a normal distribution so we would write it like this\n\n$$\nOutcome \\sim Normal(\\mu, \\sigma)\n$$\n\n\nIf it is a binary outcome we would write it like this \n\n\n$$\nOutcome \\sim Bernouli(\\text{Number of Trials},\\text{Probability true})\n$$\n\nThe next step is is we have to think about our generative model. So to ground our analysis it helps to start from a DAG. We generally have beliefs about an intervention in the world. It helps to start from a causal model because we generally have beliefs about what parts of the model we care about. That way we can start thinking about the potential relationships in our data. We then have to think of the plausible ranges for these values and what the uncertainty around them. \n\n\n$$\n\\begin{align}\n\\textbf{Outcome} \\sim N(\\mu, \\sigma) \\\\[8pt]\n\\textbf{Predictor One} \\sim N (3, 1)\n\\end{align}\n$$\n\nWhere we are shifting the mean a bit and putting a somewhat conservative prior. This is generally fine but there are lots of priors we can set. \n\nLets say that out in the real world by some miracle of god we have a true normal distribution where the mean is zero and the standard deviation is 1. We can set informative, weakly informative, flat/non-informative prior, and a conjugate prior. Conjugate priors are a little bit harder to visualize with the below schema because a conjugate prior is something that also relies on the posterior. Meaning that if it turns out the posterior of our mean comes from the same family then it turns out that our prior is conjugate.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn = 1000\n\nprior_df = tibble(\n    pop = rnorm(n),\n    `Kinda Flat` = rnorm(n, sd = 5), \n    informative = rnorm(n, mean = 0.5, sd = 1)\n) |>\n    pivot_longer(everything(),\n        names_to = 'prior',\n        values_to = 'value'\n    )\n\n\nggplot(prior_df, aes(x = value, fill = prior)) +\n    geom_density(alpha = 0.5) +\n    scale_fill_manual(values = c('Kinda Flat' = '#a40000', 'informative' = '#00b7a7', 'pop' = '#ffcd12')) +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Bayesian-Stats_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThis could be better but you kind of get the idea. A flat/uninformative prior is at best a bit like saying \"the parameter of interest is somewhere between $-\\infty$ and $\\infty$.\" My flat prior in the plot is more akin to a weakly informative prior is more akin to having a little more humility. A weakly informative prior is more akin to like we wouldn't expect the treatment effect to be all that big but it is not outside of the realm of possibility. Priors can get pretty crazy because well the real world is messy and making simplyfying assumptions is hard. This is why (most) Bayesians will simulate the world first before even touching the data. \n\n\n\n\n\n## Simulating Worlds \n\nSimulations are superpowerful because we get to play god in a way that we don't normally get to do as social scientists. We can really simply simulate that you have roughly a 50/50 chance of getting heads or tails. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoin_flips = replicate(10000, sample(c('heads', 'tails'), 1))\n\ncoin_flips |>\n    as_tibble() |>\n    group_by(value) |>\n    summarise(counts = n()) |>\n    ungroup() |>\n    mutate(probs = counts/sum(counts))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  value counts probs\n  <chr>  <int> <dbl>\n1 heads   5079 0.508\n2 tails   4921 0.492\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWhile this is intuitive we can see how this varies by number of flips. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_flips = 100\n\nflips = sample(c('heads', 'tails'), size = num_flips, replace = TRUE)\n\ncoin_flips = tibble(\n    heads_frequency = cumsum(flips == 'heads')/1:num_flips,\n    flip_number = 1:num_flips\n\n)\n\n\nggplot(coin_flips, aes(x = flip_number, y = heads_frequency)) +\n    geom_line() +\n    geom_hline(yintercept = 0.5) +\n    scale_y_continuous(limits = c(0,1)) +\n    labs(x = 'Flip Number', y = 'Proportion of Heads') +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Bayesian-Stats_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\nIn expectation we start getting closer and closer to 50% heads. Neat, but why should we care? Well we can test how well our prior does on various situations with a known truth. \n\nLets take a randomized control trial with unobserved confounding using the really excellent `DeclareDesign` package. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen = 999)\nlibrary(DeclareDesign)\n\nrct <-\n  declare_model(N = 100,\n                U = rnorm(N),\n                potential_outcomes(Y ~ 0.2 * Z + U)) +\n  declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0)) +\n  declare_assignment(Z = complete_ra(N, prob = 0.5)) +\n  declare_measurement(Y = reveal_outcomes(Y ~ Z)) +\n  declare_estimator(Y ~ Z, inquiry = \"ATE\")\n\n\nfake_data = draw_data(rct)\n```\n:::\n\n\n\n\n\n\nSo now we have some fake data where we can display the 'truth' or in this case 0.2 \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiagnose_design(rct)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nResearch design diagnosis based on 500 simulations. Diagnosis completed in 2 secs. Diagnosand estimates with bootstrapped standard errors in parentheses (100 replicates).\n\n Design Inquiry Estimator Outcome Term N Sims Mean Estimand Mean Estimate\n    rct     ATE estimator       Y    Z    500          0.20          0.21\n                                                     (0.00)        (0.01)\n   Bias SD Estimate   RMSE  Power Coverage\n   0.01        0.20   0.20   0.19     0.95\n (0.01)      (0.01) (0.01) (0.02)   (0.01)\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWhen we go and estimate it on some fake data we can see how keeping or omitting the unobserved confounding. \n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontrol_for_confounding = lm(Y ~ Z + U, data = fake_data)\n\nno_controls = lm(Y ~ Z, data = fake_data)\n\n\nmodelsummary::modelsummary(list('Controls Added' = control_for_confounding,\n                                 'No Controls' = no_controls),\n                          gof_map = 'nobs',\n                          stars = TRUE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_4az1mx1bi97t2z1ay0vs(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_4az1mx1bi97t2z1ay0vs\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_4az1mx1bi97t2z1ay0vs');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_4az1mx1bi97t2z1ay0vs(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_4az1mx1bi97t2z1ay0vs\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 7, j: 1 }, { i: 7, j: 2 },  ], css_id: 'tinytable_css_xptmnugp4idmhf313hxj',}, \n          { positions: [ { i: 7, j: 0 },  ], css_id: 'tinytable_css_tzkywlsojza126m15fre',}, \n          { positions: [ { i: 6, j: 1 }, { i: 6, j: 2 },  ], css_id: 'tinytable_css_kuvw1ixs4967x2kukvjv',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 3, j: 1 }, { i: 5, j: 1 }, { i: 2, j: 2 }, { i: 3, j: 2 }, { i: 4, j: 1 }, { i: 1, j: 2 }, { i: 4, j: 2 }, { i: 5, j: 2 },  ], css_id: 'tinytable_css_bwc32omvb6beb0g1a5iu',}, \n          { positions: [ { i: 6, j: 0 },  ], css_id: 'tinytable_css_46hnykl8mryg6yd9aqfd',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 5, j: 0 },  ], css_id: 'tinytable_css_3zafbwqu8hbyp4c44tk8',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_2lafw4t4y71268d99rel',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_0p4gl8c3xltpswl89qns',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_4az1mx1bi97t2z1ay0vs(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_xptmnugp4idmhf313hxj, .table th.tinytable_css_xptmnugp4idmhf313hxj { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_tzkywlsojza126m15fre, .table th.tinytable_css_tzkywlsojza126m15fre { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_kuvw1ixs4967x2kukvjv, .table th.tinytable_css_kuvw1ixs4967x2kukvjv { text-align: center; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_bwc32omvb6beb0g1a5iu, .table th.tinytable_css_bwc32omvb6beb0g1a5iu { text-align: center; }\n      .table td.tinytable_css_46hnykl8mryg6yd9aqfd, .table th.tinytable_css_46hnykl8mryg6yd9aqfd { text-align: left; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_3zafbwqu8hbyp4c44tk8, .table th.tinytable_css_3zafbwqu8hbyp4c44tk8 { text-align: left; }\n      .table td.tinytable_css_2lafw4t4y71268d99rel, .table th.tinytable_css_2lafw4t4y71268d99rel { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_0p4gl8c3xltpswl89qns, .table th.tinytable_css_0p4gl8c3xltpswl89qns { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_4az1mx1bi97t2z1ay0vs\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">Controls Added</th>\n                <th scope=\"col\">No Controls</th>\n              </tr>\n        </thead>\n        <tfoot><tr><td colspan='3'>+ p < 0.1, * p < 0.05, ** p < 0.01, *** p < 0.001</td></tr></tfoot>\n        <tbody>\n                <tr>\n                  <td>(Intercept)</td>\n                  <td>-0.000</td>\n                  <td>0.254+</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.000)</td>\n                  <td>(0.130)</td>\n                </tr>\n                <tr>\n                  <td>Z</td>\n                  <td>0.200***</td>\n                  <td>0.128</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.000)</td>\n                  <td>(0.185)</td>\n                </tr>\n                <tr>\n                  <td>U</td>\n                  <td>1.000***</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.000)</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>Num.Obs.</td>\n                  <td>100</td>\n                  <td>100</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n\n\nThis is pretty cool to see how this can go if we don't account for things that should be accounted for. The same general principle applies in Bayesian analysis. The reason we simulate out a RCT is that they are super expensive! We want to diagnose what could go wrong before we tell our partners what to do. The same idea applies for Bayes because we have two separate problems that can make it hard to tell what is going on. We have computational problems that can arise due to how Bayesian models are fit and we have modeling problems which are really just scientific problems. Conceptually these are somewhat distinct but practically these two run into each other all the time. We can isolate some of the computational mechanics of fitting a bad model on data we know is 'good'. This makes fitting lots of models easier. \n\n\nHow should we simulat the data? Typically we will define a parameter that seems reasonable! So if we are trying measure. So if we were trying to model the impact of a treatment on conversion rate aka how often do we move from a free user to a subscriber setting simulating a uniform distribution across treatment and control.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\nlibrary(brms)\nlibrary(modelsummary)\nlibrary(tidybayes)\nlibrary(broom.mixed)\n\nconversions_tibble = tibble(\n    Control = runif(100, min = 0, max = 100),\n    Treatment = runif(100, min = 0, max = 100),\n) |>\n    pivot_longer(everything(),\n    names_to = 'condition',\n    values_to = 'conversion_rate') \n\nggplot(conversions_tibble, aes(x = conversion_rate, fill = condition)) +\n    geom_density() +\n    facet_wrap(vars(condition), ncol = 1) +\n    theme_minimal() + \n    labs(x = 'Conversion Rate', y = NULL) +\n    theme(legend.position = 'none') \n```\n\n::: {.cell-output-display}\n![](Bayesian-Stats_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nWe wouldn't expect that by doing nothing that conversion rate is uniformly distributed between 0 and 100 percent. Conversion rate for Netflix or established streaming services is probably closer to something that looks like this. \n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nconversions_tibble_reasonable = tibble(\n    # most in the control group don't convert \n    Control = rbeta(n = 100, shape1 = 3, shape2 = 7) * 10,\n    # people in the control group are slightly more likely to convert\n    Treatment = rbeta(n = 100, shape1 = 6, shape2 = 4) * 10,\n) |>\n    pivot_longer(everything(),\n    names_to = 'condition',\n    values_to = 'conversion_rate') \n\nggplot(conversions_tibble_reasonable, aes(x = conversion_rate, fill = condition)) +\n    geom_density() +\n    facet_wrap(vars(condition), ncol = 1) +\n    theme_minimal() + \n    labs(x = 'Conversion Rate', y = NULL) +\n    theme(legend.position = 'none') \n```\n\n::: {.cell-output-display}\n![](Bayesian-Stats_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## Checking our Models\n\nThere are lots of ways to check our model! One way that is fairly common because Gelman reccomends it is prior predictive checks. The first is a prior predictive check which is just a way for us to check on what influence the prior is going to have on the posterior distribution. As our data grows the influence of our prior is going to decrease and the likelihood function is going to start to have more influence on the posterior distribution. Or in other words how probable the observed data is given different value of the model. However, they are not totally irrelevant the prior can impose a form of regularization shrinking the posterior predictions back towards the 'true value.' This is to say that even in large-n settings a well calibrated prior is still important in simple models. In much more complex models the prior is going to do a lot more.\n\nIn a sense we did something similar but what we are doing is modeling the problem only using the priors. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitanic <- read.csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/Stat2Data/Titanic.csv\")\ntitanic <- subset(titanic, PClass != \"*\")\n\nf <- Survived ~ SexCode + Age + PClass\n\n\n\nmod_prior <- brm(PClass ~ SexCode + Age,\n    data = titanic,\n     prior = c(\n        prior(normal(0, 3), class = b, dpar = \"mu2nd\"),\n        prior(normal(0, 3), class = b, dpar = \"mu3rd\")),\n    family = categorical(link = logit),\n    sample_prior = \"only\")\n\n\npp_check(mod_prior)   \n```\n\n::: {.cell-output-display}\n![](Bayesian-Stats_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n\nIn this case we the prior does okay matching the observed data. It could definitely be better\n\n:::callout\n\nLets break down some `brms` syntax first. \n\n- `prior` - somewhat self explantory\n\n- `normal` - somewhat self explantory\n\n- `class = b` - Set the prior at the population level. \n\n- `dpar = 'class'` - Here we are telling it that we are making an assumption about the probability of being in second or 3rd class relative to 1st class \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_prior |>\n    modelsummary()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_dlsw5a7zyu2irmitye6v(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_dlsw5a7zyu2irmitye6v\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_dlsw5a7zyu2irmitye6v');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_dlsw5a7zyu2irmitye6v(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_dlsw5a7zyu2irmitye6v\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 0, j: 1 },  ], css_id: 'tinytable_css_upkck0eijyq67ulv8pqz',}, \n          { positions: [ { i: 6, j: 0 },  ], css_id: 'tinytable_css_j93a4qiw68sj89649v0g',}, \n          { positions: [ { i: 12, j: 0 },  ], css_id: 'tinytable_css_gk43dkguq4oj0b0nl0ht',}, \n          { positions: [ { i: 12, j: 1 },  ], css_id: 'tinytable_css_dqxxx35fhtpptfnqvlcx',}, \n          { positions: [ { i: 6, j: 1 },  ], css_id: 'tinytable_css_bgicvonllnv93ahz126h',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 5, j: 0 }, { i: 10, j: 0 }, { i: 7, j: 0 }, { i: 8, j: 0 }, { i: 9, j: 0 }, { i: 11, j: 0 },  ], css_id: 'tinytable_css_98oipwqgcrjm0w4vgj0e',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_8dsi8s5kxis758urboeg',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 3, j: 1 }, { i: 4, j: 1 }, { i: 5, j: 1 }, { i: 10, j: 1 }, { i: 7, j: 1 }, { i: 8, j: 1 }, { i: 9, j: 1 }, { i: 11, j: 1 },  ], css_id: 'tinytable_css_5vi52h3rd7g4zd3ta5xq',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_dlsw5a7zyu2irmitye6v(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_upkck0eijyq67ulv8pqz, .table th.tinytable_css_upkck0eijyq67ulv8pqz { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_j93a4qiw68sj89649v0g, .table th.tinytable_css_j93a4qiw68sj89649v0g { text-align: left; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_gk43dkguq4oj0b0nl0ht, .table th.tinytable_css_gk43dkguq4oj0b0nl0ht { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_dqxxx35fhtpptfnqvlcx, .table th.tinytable_css_dqxxx35fhtpptfnqvlcx { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_bgicvonllnv93ahz126h, .table th.tinytable_css_bgicvonllnv93ahz126h { text-align: center; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_98oipwqgcrjm0w4vgj0e, .table th.tinytable_css_98oipwqgcrjm0w4vgj0e { text-align: left; }\n      .table td.tinytable_css_8dsi8s5kxis758urboeg, .table th.tinytable_css_8dsi8s5kxis758urboeg { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_5vi52h3rd7g4zd3ta5xq, .table th.tinytable_css_5vi52h3rd7g4zd3ta5xq { text-align: center; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_dlsw5a7zyu2irmitye6v\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">(1)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>b_mu2nd_Intercept</td>\n                  <td>0.966</td>\n                </tr>\n                <tr>\n                  <td>b_mu3rd_Intercept</td>\n                  <td>1.859</td>\n                </tr>\n                <tr>\n                  <td>b_mu2nd_SexCode</td>\n                  <td>0.060</td>\n                </tr>\n                <tr>\n                  <td>b_mu2nd_Age</td>\n                  <td>-0.022</td>\n                </tr>\n                <tr>\n                  <td>b_mu3rd_SexCode</td>\n                  <td>-0.058</td>\n                </tr>\n                <tr>\n                  <td>b_mu3rd_Age</td>\n                  <td>-0.055</td>\n                </tr>\n                <tr>\n                  <td>Num.Obs.</td>\n                  <td>756</td>\n                </tr>\n                <tr>\n                  <td>ELPD</td>\n                  <td>-111346.9</td>\n                </tr>\n                <tr>\n                  <td>ELPD s.e.</td>\n                  <td>2853.9</td>\n                </tr>\n                <tr>\n                  <td>LOOIC</td>\n                  <td>222693.9</td>\n                </tr>\n                <tr>\n                  <td>LOOIC s.e.</td>\n                  <td>5707.9</td>\n                </tr>\n                <tr>\n                  <td>WAIC</td>\n                  <td>1622021.9</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n\nOne important thing to note is that `brms` is based off of `lme4` which is one of the premier multilevel modeling packages for frequentist. As a political scientist we aren't really multilevel model people we are more throw OLS at everything people so some of the terminology around is different. \n\nIn OLS political science land we would say we include 'class fixed effects' to refer to a model that does something like this. \n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is a bad model don't judge \nlogit_fe = glm(Survived ~ Age + SexCode + factor(PClass), data = titanic, family = binomial(link = 'logit'))\n\nmodelsummary(logit_fe)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_3g2jn5o4lsfh1fmckc2h(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_3g2jn5o4lsfh1fmckc2h\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_3g2jn5o4lsfh1fmckc2h');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_3g2jn5o4lsfh1fmckc2h(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_3g2jn5o4lsfh1fmckc2h\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 5, j: 0 }, { i: 6, j: 0 }, { i: 7, j: 0 }, { i: 8, j: 0 }, { i: 9, j: 0 }, { i: 14, j: 0 }, { i: 11, j: 0 }, { i: 12, j: 0 }, { i: 13, j: 0 }, { i: 15, j: 0 },  ], css_id: 'tinytable_css_xk83u1zkx9a8ryybgur9',}, \n          { positions: [ { i: 10, j: 1 },  ], css_id: 'tinytable_css_wz93iv7spwh81g6wzbl7',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 3, j: 1 }, { i: 4, j: 1 }, { i: 5, j: 1 }, { i: 6, j: 1 }, { i: 7, j: 1 }, { i: 8, j: 1 }, { i: 9, j: 1 }, { i: 14, j: 1 }, { i: 11, j: 1 }, { i: 12, j: 1 }, { i: 13, j: 1 }, { i: 15, j: 1 },  ], css_id: 'tinytable_css_o90hwnt4pnxx514lziod',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_jmnqxgku5b5iqla86174',}, \n          { positions: [ { i: 0, j: 1 },  ], css_id: 'tinytable_css_gq2j81bq6p0z6iskjzqc',}, \n          { positions: [ { i: 16, j: 0 },  ], css_id: 'tinytable_css_fesvjkdtpsi0w0noqywn',}, \n          { positions: [ { i: 16, j: 1 },  ], css_id: 'tinytable_css_e215scvor9n56xww6l79',}, \n          { positions: [ { i: 10, j: 0 },  ], css_id: 'tinytable_css_6ib1fntp75ekrlaix9be',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_3g2jn5o4lsfh1fmckc2h(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_xk83u1zkx9a8ryybgur9, .table th.tinytable_css_xk83u1zkx9a8ryybgur9 { text-align: left; }\n      .table td.tinytable_css_wz93iv7spwh81g6wzbl7, .table th.tinytable_css_wz93iv7spwh81g6wzbl7 { text-align: center; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_o90hwnt4pnxx514lziod, .table th.tinytable_css_o90hwnt4pnxx514lziod { text-align: center; }\n      .table td.tinytable_css_jmnqxgku5b5iqla86174, .table th.tinytable_css_jmnqxgku5b5iqla86174 { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_gq2j81bq6p0z6iskjzqc, .table th.tinytable_css_gq2j81bq6p0z6iskjzqc { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_fesvjkdtpsi0w0noqywn, .table th.tinytable_css_fesvjkdtpsi0w0noqywn { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_e215scvor9n56xww6l79, .table th.tinytable_css_e215scvor9n56xww6l79 { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_6ib1fntp75ekrlaix9be, .table th.tinytable_css_6ib1fntp75ekrlaix9be { text-align: left; border-bottom: solid black 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_3g2jn5o4lsfh1fmckc2h\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">(1)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>(Intercept)</td>\n                  <td>1.128</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.351)</td>\n                </tr>\n                <tr>\n                  <td>Age</td>\n                  <td>-0.039</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.008)</td>\n                </tr>\n                <tr>\n                  <td>SexCode</td>\n                  <td>2.631</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.202)</td>\n                </tr>\n                <tr>\n                  <td>factor(PClass)2nd</td>\n                  <td>-1.292</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.260)</td>\n                </tr>\n                <tr>\n                  <td>factor(PClass)3rd</td>\n                  <td>-2.521</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.277)</td>\n                </tr>\n                <tr>\n                  <td>Num.Obs.</td>\n                  <td>756</td>\n                </tr>\n                <tr>\n                  <td>AIC</td>\n                  <td>705.1</td>\n                </tr>\n                <tr>\n                  <td>BIC</td>\n                  <td>728.3</td>\n                </tr>\n                <tr>\n                  <td>Log.Lik.</td>\n                  <td>-347.570</td>\n                </tr>\n                <tr>\n                  <td>F</td>\n                  <td>50.339</td>\n                </tr>\n                <tr>\n                  <td>RMSE</td>\n                  <td>0.38</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n\nWhen we say class fixed effects we really just mean including an intercept per classs. In multilevel land what we mean by a fixed effect is really just saying that these effects are constant across groups. So think of the effect of school on classroom performance or the effect of product popularity on ROI on adverstising channels. The way we would replicate the this is something to the effect of \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm(Survived ~ Age + (1|PClass), data = titanic) |>\n   modelsummary()\n```\n:::\n\n\n\n\n\nAdmittedly also a really bad model but you get the idea. \n\n:::\n\nWe can then check our priors. We can also set priors on the intercept in our Titanic example if we stripped away age, class, and sex what would our baseline expectation of survival be? In an RCT this is really just what is a reasonable expectation for our control group. For other more complex models we could put priors on the effect of time, space, interactions between groupings and so much more. \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}