{
  "hash": "ed03221708654fd2dd25aa76b283545f",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Viz with Matplot \n\nIt is time to learn the grammar of matplot. Since it is the most popular library and you are going to use data viz a fair amount. In some ways matplot lib is like ggplot in a lot of other ways it very much is not. A better mental mapping in some cases is how you would do things in base R. \n\n## Initializing a plot\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars as pl\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\n\n# Load dataset into a Polars DataFrame\npengs = pl.from_pandas(load_penguins()).drop_nulls()\n\n```\n:::\n\n\n\n\n\nInstead of simply mapping what you know onto this you should learn it for what it is. There are three layers to matplotlib that makes it quirky. Most of this is going to be taken from scientific visualization with matplotlib. In this case I am directly ripping this script from the book. \n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\"}\nfrom matplotlib.ticker import AutoMinorLocator, MultipleLocator, FuncFormatter\n\nnp.random.seed(123)\n\nX = np.linspace(0.5, 3.5, 100)\nY1 = 3 + np.cos(X)\nY2 = 1 + np.cos(1 + X / 0.75) / 2\nY3 = np.random.uniform(Y1, Y2, len(X))\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(1, 1, 1, aspect=1)\n\n\ndef minor_tick(x, pos):\n    if not x % 1.0:\n        return \"\"\n    return \"%.2f\" % x\n\n\nax.xaxis.set_major_locator(MultipleLocator(1.000))\nax.xaxis.set_minor_locator(AutoMinorLocator(4))\nax.yaxis.set_major_locator(MultipleLocator(1.000))\nax.yaxis.set_minor_locator(AutoMinorLocator(4))\nax.xaxis.set_minor_formatter(FuncFormatter(minor_tick))\n\nax.set_xlim(0, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(0.0, 4.0)\n```\n\n\n:::\n\n```{.python .cell-code  code-fold=\"true\"}\nax.set_ylim(0, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(0.0, 4.0)\n```\n\n\n:::\n\n```{.python .cell-code  code-fold=\"true\"}\n\nax.tick_params(which=\"major\", width=1.0)\nax.tick_params(which=\"major\", length=10)\nax.tick_params(which=\"minor\", width=1.0, labelsize=10)\nax.tick_params(which=\"minor\", length=5, labelsize=10, labelcolor=\"0.25\")\n\nax.grid(linestyle=\"--\", linewidth=0.5, color=\".25\", zorder=-10)\n\nax.plot(X, Y1, c=(0.25, 0.25, 1.00), lw=2, label=\"Blue signal\", zorder=10)\nax.plot(X, Y2, c=(1.00, 0.25, 0.25), lw=2, label=\"Red signal\")\nax.plot(X, Y3, linewidth=0, marker=\"o\", markerfacecolor=\"w\", markeredgecolor=\"k\")\n\nax.set_title(\"Anatomy of a figure. Part of Figure\", fontsize=20, verticalalignment=\"bottom\")\nax.set_xlabel(\"X axis label. Part of Axis\")\nax.set_ylabel(\"Y axis label. Part of Axis\")\n\nax.legend()\n\n\ndef circle(x, y, radius=0.15):\n    from matplotlib.patches import Circle\n    from matplotlib.patheffects import withStroke\n\n    circle = Circle(\n        (x, y),\n        radius,\n        clip_on=False,\n        zorder=10,\n        linewidth=1,\n        edgecolor=\"black\",\n        facecolor=(0, 0, 0, 0.0125),\n        path_effects=[withStroke(linewidth=5, foreground=\"w\")],\n    )\n    ax.add_artist(circle)\n\n\ndef text(x, y, text):\n    ax.text(\n        x,\n        y,\n        text,\n        backgroundcolor=\"white\",\n        # fontname=\"Yanone Kaffeesatz\", fontsize=\"large\",\n        ha=\"center\",\n        va=\"top\",\n        weight=\"regular\",\n        color=\"#000099\",\n    )\n\n\n# Minor tick\ncircle(0.50, -0.10)\ntext(0.50, -0.32, \"Minor tick label\")\n\n# Major tick\ncircle(-0.03, 4.00)\ntext(0.03, 3.80, \"Major tick\")\n\n# Minor tick\ncircle(0.00, 3.50)\ntext(0.00, 3.30, \"Minor tick\")\n\n# Major tick label\ncircle(-0.15, 3.00)\ntext(-0.15, 2.80, \"Major tick label\")\n\n# X Label\ncircle(1.80, -0.27)\ntext(1.80, -0.45, \"X axis label\")\n\n# Y Label\ncircle(-0.27, 1.80)\ntext(-0.27, 1.6, \"Y axis label\")\n\n# Title\ncircle(1.60, 4.13)\ntext(1.60, 3.93, \"Title\")\n\n# Blue plot\ncircle(1.75, 2.80)\ntext(1.75, 2.60, \"Line\\n(line plot)\")\n\n# Red plot\ncircle(1.20, 0.60)\ntext(1.20, 0.40, \"Line\\n(line plot)\")\n\n# Scatter plot\ncircle(3.20, 1.75)\ntext(3.20, 1.55, \"Markers\\n(scatter plot)\")\n\n# Grid\ncircle(3.00, 3.00)\ntext(3.00, 2.80, \"Grid\")\n\n# Legend\ncircle(3.70, 3.80)\ntext(3.70, 3.60, \"Legend\")\n\n# Axes\ncircle(0.5, 0.5)\ntext(0.5, 0.3, \"Axes\")\n\n# Figure\ncircle(-0.3, 0.65)\ntext(-0.3, 0.45, \"Figure\")\n\ncolor = \"#000099\"\nax.annotate(\n    \"Spines\",\n    xy=(4.0, 0.35),\n    xytext=(3.3, 0.5),\n    color=color,\n    weight=\"regular\",  # fontsize=\"large\", fontname=\"Yanone Kaffeesatz\",\n    arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\", color=color),\n)\n\nax.annotate(\n    \"\",\n    xy=(3.15, 0.0),\n    xytext=(3.45, 0.45),\n    color=color,\n    weight=\"regular\",  # fontsize=\"large\", fontname=\"Yanone Kaffeesatz\",\n    arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\", color=color),\n)\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n\n\n\n\nIt is important to note that there are several areas to that differ from ggplot. The logic differs in a lot of ways so there is no clean 1:1 translation of matplotlib and ggplot. So it worth adjudicating some of these differences\n\n- Figure: In way this is just bringing the plot into existince. Kind of like when you just do `ggplot`. This also includes the titles, fontface of the titles \n\n- Axes: This corresponds to the area where the data will be rendered. Sometimes refered to as the subplot. This controls the spines basically the area that is around the plot. This also includes the ticks and the actual plotting of the data. \n\n- Axis: For some reason this is separated but these are really just the equivelent of the scales argument in ggplot \n\n\n## Plotting \n\nTo initialize a plot we can just do \n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig,ax = plt.subplots(figsize=(10,6))\n\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-3-3.png){width=960}\n:::\n:::\n\n\n\n\n\n`fig` is just a matplotlib object. We don't neccessarily 'add' anything in the same way we do with ggplot. This kind of boils down to differences in R and Python. While ggplot is its own class in R and geoms have to be registered as class methods. Spirtually these all follow the functional programming paradigm. While matplotlib follows a more object oriented paradigm.\n\nSo instead of adding layers like below\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\npengs = palmerpenguins::penguins\n\nggplot(pengs, aes(x = body_mass_g)) +\n    geom_histogram()\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-4-5.png){width=672}\n:::\n:::\n\n\n\n\n\nWe are modifying each of the underlying objects using class methods. \n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig, ax = plt.subplots(figsize=(10, 6))\nax.hist(pengs[\"body_mass_g\"], bins=30)\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n\n\nNotice that one of the key differences in the two plots is that when making the plot we are operating on the `axis` class which has the plotting 'geometries'. Whereas in ggplot geom_histogram is a function that will create the bins, plot the data, then go and grab the labels, and then place them on the appropraite axis. So in matplot lib we would need to do somthing to this effect. \n\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.hist(pengs[\"body_mass_g\"], bins=30)\nax.set_xlabel(\"body_mass_g\")\nax.set_ylabel(\"count\")\nfig.suptitle(\"Distribution of Body Mass\")\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-6-3.png){width=960}\n:::\n:::\n\n\n\n\n\n\nOne thing that comes up frequently if you are doing things itertively is that if we wanted to modidfy a plot matplot has the tendency of overlaying things on top of plots that you have previously created. We actually have to close out the plot since we interact with each of the indivual object itertively especially when working in a script. \n\nWe can clear/close a plot doing one of two things \n\n::: {.columns}\n::: {.column}\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.hist(pengs[\"body_mass_g\"], bins=30)\nax.set_xlabel(\"body_mass_g\")\nax.set_ylabel(\"count\")\nfig.suptitle(\"Distribution of Body Mass\")\nfig.clf()\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-7-5.png){width=960}\n:::\n:::\n\n\n\n\n\n:::\n::: {.column}\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.hist(pengs[\"body_mass_g\"], bins=30)\nax.set_xlabel(\"body_mass_g\")\nax.set_ylabel(\"count\")\nfig.suptitle(\"Distribution of Body Mass\")\nplt.close(fig)\n```\n:::\n\n\n\n\n\n:::\n::: \n\n\n## Other elements of aes \n\n\nLets take a very simple ggplot. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pengs, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-9-7.png){width=672}\n:::\n:::\n\n\n\n\n\n\naes is kind of just a function. So when aes is not empty it will look through the unique values of the column and then loop over the values and plot them. Whereas in matplotlib we have to explicitly do this. Seaborn is a bit of a higher level api. Which will abstract some of this work away for you. In matplotlib we have to do this ourselves \n\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\"}\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\ncolors = [\"blue\", \"red\", \"green\"]\n\nspecies = pengs.unique(subset=\"species\")[\"species\"]\n\nfor color, species in zip(colors, species):\n    spec_data = pengs.filter(pl.col(\"species\") == species)\n    ax.scatter(\n        x=spec_data[\"flipper_length_mm\"],\n        y=spec_data[\"body_mass_g\"],\n        c=color,\n        label=species,\n    )\n\nax.set_xlabel(\"Flipper length mm\")\nax.set_ylabel(\"Body Mass g\")\nax.legend(loc=\"center left\", bbox_to_anchor=(1, 0.5))\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n\n\n\n\nThis would for any number of plot types \n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, ax = plt.subplots(figsize=(10, 6))\n\ncolors = [\"blue\", \"red\", \"green\"]\n\nspecies = pengs.unique(subset=\"species\")[\"species\"]\n\nfor color, species in zip(colors, species):\n    spec_data = pengs.filter(pl.col(\"species\") == species)\n    ax.hist(\n        x=spec_data[\"flipper_length_mm\"],\n        color=color,\n        label=species,\n        alpha=0.5,\n        edgecolor=\"white\",\n    )\n\nax.legend()\nax.set_xlabel(\"Flipper Length mm\")    \n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-11-3.png){width=960}\n:::\n:::\n\n\n\n\n\n\n## More 'complex plots'\n\nMatplot has a lot of nice things when we start to need more bespoke transformations to the plot areas. One of the things that it lacks when compared to seaborne or ggplot. So lets take a simple plot that we tend to make a lot in demos or just as a data exploration\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pengs, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-12-5.png){width=672}\n:::\n:::\n\n\n\n\n\nThe points we have already covered how to make but there are no built in class methods to matplot lib for a lowess smoother. Which kind of feels like a silly choice. To do this we first need to define a function. \nWe then have to do the same thing \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\"}\nfrom statsmodels.nonparametric.smoothers_lowess import lowess\n\n\ndef bootstrap_lowess(x, y, frac=0.75, it=3, n_boot=100, alpha=0.05):\n    \"\"\"\n    Bootstraps LOWESS smoothing to estimate confidence intervals.\n\n    Parameters:\n    - x, y: Input data (must be numpy arrays)\n    - frac: Smoothing span (same as ggplot default)\n    - it: Number of robustifying iterations\n    - n_boot: Number of bootstrap resamples\n    - alpha: Confidence level (default 95%)\n\n    Returns:\n    - x_sorted: Sorted x values\n    - ysm: Smoothed LOWESS estimate\n    - y_lower, y_upper: Confidence interval bounds\n    \"\"\"\n    # Sort x and y to avoid issues\n    sorted_indices = np.argsort(x)\n    x_sorted, y_sorted = x[sorted_indices], y[sorted_indices]\n\n    # Compute the original LOWESS estimate\n    smoothed = lowess(y_sorted, x_sorted, frac=frac, it=it)\n    ysm = smoothed[:, 1]  # Extract smoothed values\n\n    # Bootstrap resampling\n    y_boot = np.zeros((n_boot, len(x_sorted)))\n    for i in range(n_boot):\n        resample_idx = np.random.choice(\n            len(x_sorted), len(x_sorted), replace=True)\n        y_resampled = y_sorted[resample_idx]\n        x_resampled = x_sorted[resample_idx]\n        smoothed_boot = lowess(y_resampled, x_resampled, frac=frac, it=it)\n        y_boot[i, :] = np.interp(\n            x_sorted, smoothed_boot[:, 0], smoothed_boot[:, 1])\n\n    # Compute confidence intervals\n    lower_bound = np.percentile(y_boot, 100 * (alpha / 2), axis=0)\n    upper_bound = np.percentile(y_boot, 100 * (1 - alpha / 2), axis=0)\n\n    return x_sorted, ysm, lower_bound, upper_bound\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, ax = plt.subplots(figsize=(10, 6))\n\ncolors = [\"blue\", \"red\", \"green\"]\n\nspecies = pengs.unique(subset=\"species\")[\"species\"]\n\nfor color, species in zip(colors, species):\n    spec_data = pengs.filter(pl.col(\"species\") == species)\n    x = spec_data[\"flipper_length_mm\"].to_numpy()\n    y = spec_data[\"body_mass_g\"].to_numpy()\n\n    # Sort data to avoid issues in plot and LOWESS\n    sorted_indices = np.argsort(x)\n    x_sorted, y_sorted = x[sorted_indices], y[sorted_indices]\n    x_sorted, ysm, y_lower, y_upper = bootstrap_lowess(\n        x, y, frac=0.75, it=3, n_boot=100\n    )\n\n    # Scatter plot\n    ax.scatter(x, y, c=color, label=species, alpha=0.6)\n\n    # Smoothed LOWESS line\n    ax.plot(x_sorted, ysm, color=color, linewidth=2)\n\n    # Confidence interval shading\n    ax.fill_between(x_sorted, y_lower, y_upper, color=color, alpha=0.2)\n\n\nax.set_xlabel(\"Flipper length mm\")\nax.set_ylabel(\"Body Mass g\")\nax.legend(loc=\"center left\", bbox_to_anchor=(1, 0.5))\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n\n\n\n\nSimilarly we would need to define a kernel density estimator however it is going to be a whole lot easier to let seaborn take the wheel in some cases\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport seaborn as sns \n\nfig,ax = plt.subplots()\n\nsns.kdeplot(pengs, x = 'flipper_length_mm', fill = 'species', hue = 'species')\n\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n:::\n\n\n\n\n\nIn the same way ols and lowess plots get a bit easier and you can maintain some of the flexibility\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig, ax = plt.subplots(figsize = (10,6))\n\ncolors = [\"blue\", \"red\", \"green\"]\n\nspecies = pengs.unique(subset=\"species\")[\"species\"]\n\nfor color, species in zip(colors, species):\n    spec_data = pengs.filter(pl.col(\"species\") == species)\n    sns.regplot(spec_data, x = 'flipper_length_mm', y = 'body_mass_g', lowess = True, scatter = True,\n    ax = ax, color = color, label = species)\n\nax.set_xlabel('Flipper Length(mm)')\nax.set_ylabel('Body Mass(g)')\nax.legend()\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-16-5.png){width=960}\n:::\n:::\n\n\n\n\n\n\nSimilarly you could do the same thing for the kernel density estimator if you are truly wedded to the matplot lib default style then you could just loop over like this \n\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, ax = plt.subplots(figsize = (10,6))\n\ncolors = [\"blue\", \"red\", \"green\"]\n\nspecies = pengs.unique(subset=\"species\")[\"species\"]\n\nfor color, species in zip(colors, species):\n    spec_data = pengs.filter(pl.col(\"species\") == species)\n    sns.kdeplot(spec_data, x = 'flipper_length_mm',\n    ax = ax, fill = True, color = color, label = species)\n\nax.set_xlabel('Flipper Length(mm)')\nax.legend()\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-17-7.png){width=960}\n:::\n:::\n\n\n\n\n\n\n\n## Small Multiples \n\nSometimes we need small multiples to show make things look nice or not make our plots to busy. In ggplot this is fairly trivial because we don't neccessarily need super fine tuned control over the layout. Sometimes we just need two multiples like this.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npengs = na.omit(pengs)\n\nggplot(pengs, aes(x = body_mass_g, fill = species)) +\n    geom_histogram() +\n    facet_wrap(vars(sex))\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-18-9.png){width=672}\n:::\n:::\n\n\n\n\n\n\nIn matplotlib this is where our figure object comes in handy. We are effectively going to tell the figures that we need another plot in the same way that we use `par` in base R plots. One of the things that really makes matplotlib standout from ggplot is just how finetuned you can make the plots. \n\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\n\npengs = pengs.filter(pl.col('sex').is_not_null())\nsexs = pengs.unique(subset = 'sex')['sex']\n\nfig, axes = plt.subplots(nrows=1, ncols=len(sexs), figsize=(10,5))\n\ncolors = [\"blue\", \"red\", \"green\"]\n\nspecies = pengs.unique(subset=\"species\")[\"species\"]\n\n\n\n\n\n\nfor i, sex in enumerate(sexs):\n    ax = axes[i]\n    ax.set_title(f\"Sex: {sex}\")\n    \n    for color, species_name in zip(colors, species):\n        # Filter data for the current species and sex\n        spec_data = pengs.filter((pl.col('species') == species_name) & (pl.col('sex') == sex))\n        ax.hist(spec_data['body_mass_g'], bins=30, color=color,\n                edgecolor='white', alpha=0.7, label=species_name)\n    \n    ax.set_xlabel('Body Mass (g)')\n    ax.legend()\n\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n\n\n\n\nSimilarly we can do the same thing with our loess plots \n\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npengs = pengs.filter(pl.col('sex').is_not_null())\nsexs = pengs.unique(subset = 'sex')['sex']\n\nfig, axes = plt.subplots(nrows=1, ncols=len(sexs), figsize=(10,5))\n\ncolors = [\"blue\", \"red\", \"green\"]\n\nspecies = pengs.unique(subset=\"species\")[\"species\"]\n\n\nfor i, sex in enumerate(sexs):\n    ax = axes[i]\n    ax.set_title(f\"Sex: {sex}\")\n    \n    for color, species_name in zip(colors, species):\n        # Filter data for the current species and sex\n        spec_data = pengs.filter((pl.col('species') == species_name) & (pl.col('sex') == sex))\n        sns.regplot(spec_data, x = 'flipper_length_mm', y = 'body_mass_g', lowess = True, scatter = True,\n        ax = ax, color = color, label = species_name)\n    \n    ax.set_xlabel('Body Mass (g)')\n    ax.legend()\n\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-20-3.png){width=960}\n:::\n:::\n\n\n\n\n\n\n\n## Customizing Appearences \n\nI think generally nobody that does data visualization like the defaults. So adding themes or customizing themes are important. Lets just work with a very simple plot and just keep making it nice. \n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\ncolors = [\"blue\", \"red\", \"green\"]\n\nspecies = pengs.unique(subset=\"species\")[\"species\"]\n\n\nfor color, species in zip(colors, species):\n    spec_data = pengs.filter(pl.col(\"species\") == species)\n    ax.scatter(\n        x=spec_data[\"flipper_length_mm\"],\n        y = spec_data['body_mass_g'],\n        color=color,\n        label=species,\n        alpha=0.5\n    )\n\nax.legend()\nax.set_xlabel(\"Flipper Length mm\")    \n\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-21-5.png){width=960}\n:::\n:::\n\n\n\n\n\n\nI have a little bit of a bespoke ggplot theme which is really just aligning the axis labels and customizing the fontface to be Assitant.\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nplt.rcParams.update({\n    'font.family': 'Assistant'\n})\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\ncolors = [\"blue\", \"red\", \"green\"]\n\nspecies = pengs.unique(subset=\"species\")[\"species\"]\n\n\nfor color, species in zip(colors, species):\n    spec_data = pengs.filter(pl.col(\"species\") == species)\n    ax.scatter(\n        x=spec_data[\"flipper_length_mm\"],\n        y = spec_data['body_mass_g'],\n        color=color,\n        label=species,\n        alpha=0.5\n    )\n\nax.legend(frameon = False, loc = 'center left', bbox_to_anchor=(1, 0.5))\nax.set_xlabel(\"Flipper Length mm\", loc = 'left', labelpad = 15)   \nax.set_ylabel('Body Mass(g)', labelpad = 15, loc = 'top')\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.tick_params(axis = 'x', which = 'both', length = 0)\nax.tick_params(axis = 'y', which = 'both', length = 0)\nax.grid(True, linestyle = 'solid', which = 'major', linewidth = 0.4)\n\n```\n\n::: {.cell-output-display}\n![](data-viz_files/figure-html/unnamed-chunk-22-7.png){width=960}\n:::\n:::\n",
    "supporting": [
      "data-viz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}